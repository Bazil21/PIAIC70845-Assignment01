# -*- coding: utf-8 -*-
"""assignment 1 numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m5P92VILPIPRaySaAmnzYjL5z8GsE2cZ

# **Assignment For Numpy**

Difficulty Level **Beginner**

1. Import the numpy package under the name np
"""

import numpy as np

"""2. Create a null vector of size 10 """

x= np.zeros(10)
print(x)

"""3. Create a vector with values ranging from 10 to 49"""

array_values = np.arange(10,50)
print(array_values)

"""4. Find the shape of previous array in question 3"""

np.shape(array_values)

"""5. Print the type of the previous array in question 3"""

type(array_values)

"""6. Print the numpy version and the configuration

"""

print(np.__version__)
print(np.show_config)

"""7. Print the dimension of the array in question 3

"""

array_values.ndim

"""8. Create a boolean array with all the True values"""

bool_arr = np.array([3,3], dtype=bool)

"""9. Create a two dimensional array



"""

dd_array = np.array([[1,2,3],[1,2,3]])
print(dd_array)
print("This Dimensions of Array:")
dd_array.ndim

"""10. Create a three dimensional array


"""

ddd_array = np.array([[[1,2,3],[1,2,3],[1,2,3]]])
print(ddd_array)
print("This Dimensions of Array:")
ddd_array.ndim

"""Difficulty Level **Easy**

11. Reverse a vector (first element becomes last)
"""

np.arange(20, 0 , -1)

"""12. Create a null vector of size 10 but the fifth value which is 1 """

y = np.zeros(10)
print(y)
y[5] = 1
print(y)

"""13. Create a 3x3 identity matrix"""

ddd_array = np.array([[[1,2,3],[1,2,3],[1,2,3]]])
ddd_array

"""14. arr = np.array([1, 2, 3, 4, 5]) 

---

 Convert the data type of the given array from int to float 
"""

arr = np.array([1, 2, 3, 4, 5])
float_arr = arr.astype(np.float64)
print(float_arr)

"""15. arr1 =          np.array([[1., 2., 3.],

                    [4., 5., 6.]])  
                      
    arr2 = np.array([[0., 4., 1.],
     
                   [7., 2., 12.]])

---


Multiply arr1 with arr2

"""

arr1 = np.array([[1., 2., 3.],[4., 5., 6.]])
arr2 = np.array([[0., 4., 1.],[7., 2., 12.]])
arr1 * arr2

"""16. arr1 = np.array([[1., 2., 3.],
                    [4., 5., 6.]]) 
                    
    arr2 = np.array([[0., 4., 1.], 
                    [7., 2., 12.]])


---

Make an array by comparing both the arrays provided above
"""

arr1 = np.array([[1., 2., 3.], [4., 5., 6.]]) 
arr2 = np.array([[0., 4., 1.],[7., 2., 12.]])
compare = arr1 == arr2
new_array = compare.all()
print(new_array)

"""17. Extract all odd numbers from arr with values(0-9)"""

a = np.arange(0,9)
a[a % 2 == 1]

"""18. Replace all odd numbers to -1 from previous array"""

a = a-1
a

"""19. arr = np.arange(10)


---

Replace the values of indexes 5,6,7 and 8 to **12**
"""

arr = np.arange(10)
arr
arr[5:9] = 12
arr

"""20. Create a 2d array with 1 on the border and 0 inside"""

a = np.ones([5,5])
print(a)
print("\n 1 on the border and 0 inside: \n")
a[1:-1, 1:-1] = 0
print(a)

"""Difficulty Level **Medium**

21. arr2d = np.array([[1, 2, 3],

                    [4, 5, 6], 

                    [7, 8, 9]])

---

Replace the value 5 to 12
"""

arr2d = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]])
raveled_arr = arr2d.ravel()
raveled_arr[4]= 12
arr2d

"""22. arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

---
Convert all the values of 1st array to 64

"""

arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
arr3d[0] = 64
arr3d

"""23. Make a 2-Dimensional array with values 0-9 and slice out the first 1st 1-D array from it"""

a = np.arange(9).reshape((3,3))
a[0]

"""24. Make a 2-Dimensional array with values 0-9 and slice out the 2nd value from 2nd 1-D array from it"""

b = np.arange(9).reshape(3,3)
b[1:2,1:2]

"""25. Make a 2-Dimensional array with values 0-9 and slice out the third column but only the first two rows"""

c = np.arange(9).reshape(3,3)
print(c)
c[0:2,2]

"""26. Create a 10x10 array with random values and find the minimum and maximum values"""

x = np.random.random((10,10))
xmin, xmax = x.min(), x.max()
print("Minimum and Maximum Values:")
print(xmin, xmax)

"""27. a = np.array([1,2,3,2,3,4,3,4,5,6]) b = np.array([7,2,10,2,7,4,9,4,9,8])
---
Find the common items between a and b

"""

a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])
c = np.intersect1d(a,b)
print(c)

"""28. a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])

---
Find the positions where elements of a and b match


"""

a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])
np.searchsorted(a, np.intersect1d(a, b))

"""29.  names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])  data = np.random.randn(7, 4)

---
Find all the values from array **data** where the values from array **names** are not equal to **Will**

"""

names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) 
data = np.random.randn(7, 4)
for name in names:
  if name!="Will":
    c = np.intersect1d(data,name)
    print(c)

"""30. names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) data = np.random.randn(7, 4)

---
Find all the values from array **data** where the values from array **names** are not equal to **Will** and **Joe**


"""

names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) 
data = np.random.randn(7, 4)
for name in names:
  if name!="Will" and "Joe":
   c = np.intersect1d(name,data)
   print(c)

"""Difficulty Level **Hard**

31. Create a 2D array of shape 5x3 to contain decimal numbers between 1 and 15.
"""

rand_arr = np.random.uniform(1,15, size=(5,3))
print(rand_arr)

"""32. Create an array of shape (2, 2, 4) with decimal numbers between 1 to 16."""

rand_arr = np.random.uniform(1,16, size=(2,2,4))
print(rand_arr)

"""33. Swap axes of the array you created in Question 32"""

rand_arr = np.random.uniform(1,16, size=(2,4,2))
print(rand_arr)

"""34. Create an array of size 10, and find the square root of every element in the array, if the values less than 0.5, replace them with 0"""

arr = np.arange(10)
for num in arr:
  sq_arr = np.sqrt(num)
  if sq_arr < 0.5:
    sq_arr = 0
  print(sq_arr)

"""35. Create two random arrays of range 12 and make an array with the maximum values between each element of the two arrays"""

a = np.random.randint(12, size=(12))
b = np.random.randint(12, size=(12))
c = np.maximum(a, b) 
print(c)

"""36. names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])

---
Find the unique names and sort them out!

"""

names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
unique_names = np.unique(names)
print(unique_names)

"""37. a = np.array([1,2,3,4,5])
b = np.array([5,6,7,8,9])

---
From array a remove all items present in array b


"""

a = np.array([1,2,3,4,5])
b = np.array([5,6,7,8,9])
c = np.setdiff1d(a,b)
print(c)

"""38.  Following is the input NumPy array delete column two and insert following new column in its place.

---
sampleArray = numpy.array([[34,43,73],[82,22,12],[53,94,66]]) 


---

newColumn = numpy.array([[10,10,10]])

"""

sampleArray = np.array([[34,43,73],[82,22,12],[53,94,66]])
C = np.delete(sampleArray,0, 1)
newColumn = np.array([[10,10,10]])

"""39. x = np.array([[1., 2., 3.], [4., 5., 6.]]) y = np.array([[6., 23.], [-1, 7], [8, 9]])


---
Find the dot product of the above two matrix

"""

x = np.array([[1., 2., 3.], [4., 5., 6.]]) 
y = np.array([[6., 23.], [-1, 7], [8, 9]])
np.dot(x,y)

"""40. Generate a matrix of 20 random values and find its cumulative sum"""

a = np.random.randint(20, size=(20))
print(np.cumsum(a))